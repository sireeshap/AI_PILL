name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing and Build
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('Backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run Backend Tests
      working-directory: ./Backend
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        SECRET_KEY: test-secret-key-for-github-actions
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        python -m pytest app/tests/ -v --tb=short

    - name: Test Backend Health Check
      working-directory: ./Backend
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        SECRET_KEY: test-secret-key-for-github-actions
      run: |
        # Start the backend server in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        # Test API documentation
        curl -f http://localhost:8000/docs || exit 1

  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json

    - name: Install Frontend dependencies
      working-directory: ./Frontend
      run: npm ci

    - name: Run Frontend Linting
      working-directory: ./Frontend
      run: npm run lint

    - name: Run Frontend Tests
      working-directory: ./Frontend
      run: npm test -- --passWithNoTests

    - name: Build Frontend
      working-directory: ./Frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api/v1
      run: npm run build

    - name: Export Static Frontend (if using static export)
      working-directory: ./Frontend
      run: |
        # Uncomment if using static export
        # npm run export

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/ai-pills-backend
          ${{ secrets.DOCKER_USERNAME }}/ai-pills-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend
        file: ./Backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/ai-pills-backend:latest,${{ secrets.DOCKER_USERNAME }}/ai-pills-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./Frontend
        file: ./Frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/ai-pills-frontend:latest,${{ secrets.DOCKER_USERNAME }}/ai-pills-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.PRODUCTION_API_URL }}

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          # Navigate to deployment directory
          cd /opt/ai-pills

          # Pull latest images
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-pills-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/ai-pills-frontend:latest

          # Update docker-compose with new images
          export BACKEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/ai-pills-backend:latest
          export FRONTEND_IMAGE=${{ secrets.DOCKER_USERNAME }}/ai-pills-frontend:latest

          # Deploy using docker-compose
          docker-compose down
          docker-compose up -d

          # Health check
          sleep 30
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:3000 || exit 1

          # Clean up old images
          docker image prune -f

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify Deployment Status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

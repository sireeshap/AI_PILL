name: 'AI Pills CI/CD with Podman'

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/ai-pills-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/ai-pills-frontend

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: test_db
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.adminCommand({ping: 1})'" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Backend Tests
      working-directory: ./Backend
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        SECRET_KEY: test-secret-key-for-github-actions
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30
      run: |
        python -m pytest app/tests/ -v --tb=short

    - name: Test Backend Health Check
      working-directory: ./Backend
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test_db?authSource=admin
        SECRET_KEY: test-secret-key-for-github-actions
      run: |
        # Start the backend server in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        # Test API documentation
        curl -f http://localhost:8000/docs || exit 1

  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './Frontend/package-lock.json'

    - name: Install Frontend Dependencies
      working-directory: ./Frontend
      run: npm ci

    - name: Run Frontend Linting
      working-directory: ./Frontend
      run: npm run lint

    - name: Build Frontend
      working-directory: ./Frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api/v1
      run: npm run build

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push with Podman
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Podman
      run: |
        sudo apt-get update
        sudo apt-get install -y podman
        podman --version

    - name: Login to Docker Hub with Podman
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | podman login ${{ env.REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Backend Image with Podman
      run: |
        podman build -t ${{ env.BACKEND_IMAGE }}:latest -t ${{ env.BACKEND_IMAGE }}:${{ github.sha }} ./Backend

    - name: Build Frontend Image with Podman
      run: |
        podman build -t ${{ env.FRONTEND_IMAGE }}:latest -t ${{ env.FRONTEND_IMAGE }}:${{ github.sha }} ./Frontend

    - name: Push Backend Image with Podman
      run: |
        podman push ${{ env.BACKEND_IMAGE }}:latest
        podman push ${{ env.BACKEND_IMAGE }}:${{ github.sha }}

    - name: Push Frontend Image with Podman
      run: |
        podman push ${{ env.FRONTEND_IMAGE }}:latest
        podman push ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

  # Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Navigate to application directory
          cd /opt/ai-pills
          
          # Pull latest images with Podman
          echo "${{ secrets.DOCKER_PASSWORD }}" | podman login docker.io -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          podman pull ${{ env.BACKEND_IMAGE }}:latest
          podman pull ${{ env.FRONTEND_IMAGE }}:latest
          
          # Update environment variables
          export BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}:latest
          export FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}:latest
          
          # Deploy with podman-compose (or docker-compose with podman backend)
          podman-compose down --remove-orphans || docker-compose down --remove-orphans
          podman-compose up -d || docker-compose up -d
          
          # Health check
          sleep 30
          curl -f http://localhost/health || exit 1

    - name: Verify Deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          # Check if services are running
          podman ps || docker ps
          
          # Test endpoints
          curl -f http://localhost/health
          curl -f http://localhost/api/v1/docs

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: Notify Slack
      if: ${{ secrets.SLACK_WEBHOOK_URL }}
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

    - name: Notify Email
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_HOST }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "ðŸš¨ AI Pills Deployment Failed"
        body: |
          The AI Pills deployment has failed.
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_USERNAME }}

name: Development CI

on:
  push:
    branches: [ develop, staging ]
  pull_request:
    branches: [ develop, staging, master, main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Quick Backend Tests
  backend-lint-and-test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('Backend/requirements.txt') }}

    - name: Install dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort pytest pytest-asyncio httpx

    - name: Lint with flake8
      working-directory: ./Backend
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      working-directory: ./Backend
      run: black --check app/

    - name: Import sort check
      working-directory: ./Backend
      run: isort --check-only app/

    - name: Run tests
      working-directory: ./Backend
      env:
        MONGODB_URL: mongodb://localhost:27017/test_db
        SECRET_KEY: test-secret-key
      run: pytest app/tests/ -v --tb=short

  # Quick Frontend Tests
  frontend-lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./Frontend
      run: npm ci

    - name: Lint check
      working-directory: ./Frontend
      run: npm run lint

    - name: TypeScript check
      working-directory: ./Frontend
      run: npm run type-check

    - name: Build check
      working-directory: ./Frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api/v1
      run: npm run build

    - name: Run tests
      working-directory: ./Frontend
      run: npm test -- --passWithNoTests --coverage

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    needs: [backend-lint-and-test, frontend-lint-and-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Integration Tests (only for develop/staging)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-lint-and-test, frontend-lint-and-test]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Backend dependencies
      working-directory: ./Backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Frontend dependencies
      working-directory: ./Frontend
      run: npm ci

    - name: Start Backend
      working-directory: ./Backend
      env:
        MONGODB_URL: mongodb://localhost:27017/test_db
        SECRET_KEY: test-secret-key-for-integration
      run: |
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Build Frontend
      working-directory: ./Frontend
      env:
        NEXT_PUBLIC_API_BASE_URL: http://localhost:8000/api/v1
      run: npm run build

    - name: Start Frontend
      working-directory: ./Frontend
      run: |
        npm start &
        sleep 10

    - name: Run Integration Tests
      run: |
        # Test API health
        curl -f http://localhost:8000/health
        
        # Test Frontend
        curl -f http://localhost:3000
        
        # Test API endpoints
        curl -f http://localhost:8000/api/v1/public/agents/
        
        echo "Integration tests passed!"

  # Security Scan for Development
  security-scan-dev:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Notify on PR
  pr-notification:
    runs-on: ubuntu-latest
    needs: [backend-lint-and-test, frontend-lint-and-test, code-quality]
    if: github.event_name == 'pull_request' && always()

    steps:
    - name: PR Check Status
      uses: actions/github-script@v6
      with:
        script: |
          const needs = ${{ toJSON(needs) }};
          const success = Object.values(needs).every(job => job.result === 'success');
          
          if (success) {
            core.notice('✅ All checks passed! Ready for review.');
          } else {
            core.setFailed('❌ Some checks failed. Please review the errors above.');
          }

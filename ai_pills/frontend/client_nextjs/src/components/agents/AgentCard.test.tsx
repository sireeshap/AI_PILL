// In ai_pills/frontend/client_nextjs/src/components/agents/AgentCard.test.tsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom'; // For extended matchers like toBeInTheDocument
// import { BrowserRouter as Router } from 'react-router-dom'; // Not needed if using Next.js Link correctly or mocking it
import AgentCard, { PublicAgent } from './AgentCard';

// Mock Next.js Link component if it causes issues in Jest environment without full Next.js setup
// This is a common pattern for testing Next.js specific components outside its full routing context.
jest.mock('next/link', () => {
  // Needs to return a React component
  return ({children, href}: {children: React.ReactNode, href: string; passHref?: boolean; legacyBehavior?: boolean}) => {
    // If passHref and legacyBehavior are used by <Link>, ensure the mock handles them or the child component.
    // For simple cases, an <a> tag is sufficient.
    // The Button component used inside AgentCard might need component="a" to be passed to it,
    // or the mock should handle rendering children correctly.
    // The Typography component used for the title also uses this mocked Link.
    return <a href={href}>{children}</a>;
  };
});

describe('AgentCard Component', () => {
  const mockAgent: PublicAgent = {
    id: 'agent001', // Ensure type matches (string or number)
    name: 'Test AI Agent',
    description: 'A super AI agent for testing purposes, with a long enough description to be truncated.',
    version: '1.0.0',
    tags: ['test', 'ai', 'supertag', 'another'], // Added more tags for testing slice
    developer_username: 'testdev', // Corrected to match interface
    upload_date: new Date().toISOString(),
    status: 'approved',
    github_link: 'http://github.com/test/agent'
  };

  test('renders agent name correctly', () => {
    render(<AgentCard agent={mockAgent} />);
    // Check for the name within the link
    const nameLink = screen.getByText(mockAgent.name);
    expect(nameLink).toBeInTheDocument();
    expect(nameLink.closest('a')).toHaveAttribute('href', `/agents/${mockAgent.id}`);
  });

  test('renders agent description snippet', () => {
    render(<AgentCard agent={mockAgent} />);
    // Check for the beginning of the description. The component truncates to 120 chars.
    expect(screen.getByText(/A super AI agent for testing purposes/i)).toBeInTheDocument();
    expect(screen.getByText(/.../i)).toBeInTheDocument(); // Check for truncation indicator
  });

  test('renders agent version and developer username', () => {
    render(<AgentCard agent={mockAgent} />);
    expect(screen.getByText(new RegExp(`By: ${mockAgent.developer_username}`, 'i'))).toBeInTheDocument();
    expect(screen.getByText(new RegExp(`Version: ${mockAgent.version}`, 'i'))).toBeInTheDocument();
  });

  test('renders limited tags and a +N indicator if more tags exist', () => {
    render(<AgentCard agent={mockAgent} />);
    expect(screen.getByText('test')).toBeInTheDocument();
    expect(screen.getByText('ai')).toBeInTheDocument();
    expect(screen.getByText('supertag')).toBeInTheDocument();
    expect(screen.getByText('+1')).toBeInTheDocument(); // Since we show 3 and have 4 tags
  });

  test('renders a "View Details" button linking to the correct agent page', () => {
    render(<AgentCard agent={mockAgent} />);
    // The role 'link' should find the <a> tag generated by the mocked next/link
    // The button text is "View Details"
    const linkButton = screen.getByRole('link', { name: /view details/i });
    expect(linkButton).toBeInTheDocument();
    expect(linkButton).toHaveAttribute('href', `/agents/${mockAgent.id}`);
  });
});
